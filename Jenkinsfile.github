import groovy.json.JsonOutput

bitbucketSsh = 'bitbucket-build-extend-ssh'
githubOwner = 'AccelByte'
githubRepo = 'accelbyte-java-modular-sdk'
githubSsh = 'accelbyte-sdk-sdkbuild-ssh'
githubPat = 'accelbyte-sdk-sdkbuild-pat-github'
githubUrl = "git@github.com:${githubOwner}/${githubRepo}.git"
sdkName = "AccelByte Java Extend Modular SDK"

agentLabel = params.ACTION == 'PUSH+RELEASE' ? 'extend-builder-ci && linux-amd64' : 'extend-builder-ci'

jobChannel = env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_MODULAR_SDK ? env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_MODULAR_SDK : "#activity-justice-codegen-modular-sdk"

def createGithubRelease(tag_name, prerelease = false, name = null, body = null) {
  def request = ['tag_name': tag_name]
  if (name) {
    request['name'] = name
  }
  if (body) {
    request['body'] = body
  }
  request['prerelease'] = prerelease

  def requestBody = JsonOutput.toJson(request)
  echo "Request Body: ${requestBody}"

  def response = httpRequest(
    url : "https://api.github.com/repos/${githubOwner}/${githubRepo}/releases",
    httpMode: 'POST',
    requestBody: requestBody,
    contentType: 'APPLICATION_JSON',
    authentication: githubPat,
    validResponseCodes: '200:201,422'
  )

 if (response.getStatus() != 201) {
    error("Failed to create GitHub release. Response code: ${response.getStatus()}. Response message: ${response.getContent()}")
  }
}

pipeline {
  agent {
    label "${agentLabel}"
  }
  stages {
    stage('Prepare') {
      steps {
        script {
          currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.ACTION}"
          gitHost = sh(script: "echo '${githubUrl}' | grep -oP '(?<=@).+(?=:)'", returnStdout: true).trim()
          sh "grep -q ${gitHost} ~/.ssh/known_hosts || ssh-keyscan ${gitHost} | tee -a ~/.ssh/known_hosts"
        }
      }
    }
    stage('Push') {
      when {
        expression {
          return params.ACTION == 'PUSH'
        }
      }
      steps {
        script {
          sh 'git checkout master'
          sshagent(credentials: [githubSsh]) {
            sh "git push ${githubUrl} HEAD:main"
          }
        }
      }
    }
    stage('Release') {
      when {
        expression {
          return params.ACTION == 'PUSH+RELEASE'
        }
      }
      environment {
        PUBLISH_OSSRH = credentials('maven-central-accelbyte')
        PUBLISH_ASC_KEY_FILE_PATH = credentials('maven-central-accelbyte-signing-key')
        PUBLISH_ASC_KEY_PASSWORD = credentials('maven-central-accelbyte-signing-password')
      }
      steps {
        script {
          releaseNote = params.RELEASE_NOTE

          if (params.AGS_VERSION != "None") {
            releaseNote = releaseNote.replace('@VERSION@', params.AGS_VERSION)
          }

          if (releaseNote ==~ /(?s).*@[A-Za-z0-9_-]+@.*/) {
            echo 'Release note still contains one or more template placeholders e.g. @VERSION@, etc. Please check.'
            sh 'false' // Fail this job
          }

          sh "git checkout ${params.RELEASE_BRANCH}"

          sshagent(credentials: [githubSsh]) {
            echo "Check if tag `ags/v${params.AGS_VERSION}` is exists"
            def tagCheck = sh(script: "git tag | grep 'ags/v${params.AGS_VERSION}'", returnStdout: true, returnStatus: true)
            if (tagCheck == "") {
              echo "AGS version tag 'ags/v${params.AGS_VERSION}' does not exists in source repository."
              sh 'false' // Fail this job
            }

            if (params.RELEASE_BRANCH == 'master') {
              echo "Push bitbucket 'master' to github 'main'"
              sh "git push ${githubUrl} HEAD:main"
            }
            else {
              echo "Push bitbucket '${params.RELEASE_BRANCH}' to github"
              sh "git push ${githubUrl} HEAD:${params.RELEASE_BRANCH}"
            }

            echo "Tag github with ags version"
            sh "git push ${githubUrl} 'ags/v${params.AGS_VERSION}'"

            echo "Get all tags related to 'ags/v${params.AGS_VERSION}' and push them"
            sh "git tag --contains \$(git rev-list -n 1 'ags/v${params.AGS_VERSION}') | grep -v 'ags/v${params.AGS_VERSION}' | xargs -I{} sh -c 'git push ${githubUrl} '{}' || exit 255'"

            //do github release
            releaseName = "${sdkName} for AGS v${params.AGS_VERSION}"
            createGithubRelease("ags/v${params.AGS_VERSION}", params.IS_PRERELEASE, releaseName, releaseNote)

            // Publish modules
            sh """
            make publish AGS_VER=${params.AGS_VERSION} \
              PUBLISH_OSSRH_USERNAME=\"$PUBLISH_OSSRH_USR\" \
              PUBLISH_OSSRH_PASSWORD=\"$PUBLISH_OSSRH_PSW\" \
              PUBLISH_ASC_KEY=\"\$(cat \"$PUBLISH_ASC_KEY_FILE_PATH\")\" \
              PUBLISH_ASC_KEY_PASSWORD=\"$PUBLISH_ASC_KEY_PASSWORD\"
            """

            echo "Clear"
          }
        }
      }
    }
    stage('Pull') {
      when {
        expression {
          return params.ACTION == 'PULL'
        }
      }
      steps {
        script {
          sh 'git checkout master'
          sshagent(credentials: [githubSsh])
          {
            sh "git pull ${githubUrl} main"
          }
          sshagent(credentials: [bitbucketSsh])
          {
            sh 'git push'
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        message = """
           :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*

           |*Action*
           |${params.ACTION}

           |""".stripMargin()
        slackSend(channel: jobChannel, color: '#FF0000', message: message)
      }
    }
  }
}